<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="InvalidMetadataProtectionName" xml:space="preserve">
    <value>无效的元数据保护</value>
  </data>
  <data name="InvalidMetadataProtectionDescription" xml:space="preserve">
    <value>此保护将无效的元数据添加到模块中，以防止反汇编程序/反编译器打开它们。</value>
  </data>
  <data name="InvalidMetadataProtectionInvalidMDPhaseName" xml:space="preserve">
    <value>添加无效的元数据</value>
  </data>
  <data name="AntiILDasmProtectionDescription" xml:space="preserve">
    <value>将模块标记一个属性，以阻止ILDASM对其进行反编译。</value>
  </data>
  <data name="AntiDumpProtectionName" xml:space="preserve">
    <value>内存转储保护</value>
  </data>
  <data name="HardeningPhaseName" xml:space="preserve">
    <value>强化阶段</value>
  </data>
  <data name="AntiILDasmPhaseName" xml:space="preserve">
    <value>反ILDasm标记</value>
  </data>
  <data name="HardeningProtectionName" xml:space="preserve">
    <value>保护加强</value>
  </data>
  <data name="HardeningProtectionDescription" xml:space="preserve">
    <value>该组件改进了保护代码，使其难以规避。</value>
  </data>
  <data name="AntiDumpProtectionDescription" xml:space="preserve">
    <value>此保护可防止程序集从内存中转储。</value>
  </data>
  <data name="AntiDebugProtectionName" xml:space="preserve">
    <value>反调试保护</value>
  </data>
  <data name="AntiDebugProtectionDescription" xml:space="preserve">
    <value>此保护可防止对程序集进行调试或分析。</value>
  </data>
  <data name="AntiDebugProtectionAntiDebugPhaseName" xml:space="preserve">
    <value>反调试注入</value>
  </data>
  <data name="MDPhase_EncryptingResourcesText" xml:space="preserve">
    <value>正在加密资源...</value>
  </data>
  <data name="AntiTamperProtectionName" xml:space="preserve">
    <value>防篡改保护</value>
  </data>
  <data name="AntiTamperProtectionDescription" xml:space="preserve">
    <value>确保应用程序的完整性，防止窜改程序集。</value>
  </data>
  <data name="AntiTamperProtectionInjectPhaseName" xml:space="preserve">
    <value>防篡改保护注入</value>
  </data>
  <data name="StubProtectionName" xml:space="preserve">
    <value>压缩打包程序保护</value>
  </data>
  <data name="StubProtectionDescription" xml:space="preserve">
    <value>在受保护的存根上做一些额外的工作。</value>
  </data>
  <data name="StubProtectionInjPhaseName" xml:space="preserve">
    <value>模块注入</value>
  </data>
  <data name="StubProtectionSigPhaseName" xml:space="preserve">
    <value>打包程序信息编码</value>
  </data>
  <data name="ConstantProtectionName" xml:space="preserve">
    <value>常量保护</value>
  </data>
  <data name="ConstantProtectionDescription" xml:space="preserve">
    <value>在代码中编码和压缩常量。</value>
  </data>
  <data name="ControlFlowProtectionName" xml:space="preserve">
    <value>流程控制保护</value>
  </data>
  <data name="ControlFlowProtectionDescription" xml:space="preserve">
    <value>这种保护会破坏方法中的代码，以便反编译器无法反编译方法。</value>
  </data>
  <data name="ReferenceProxyProtectionName" xml:space="preserve">
    <value>引用代理保护</value>
  </data>
  <data name="ReferenceProxyProtectionDescription" xml:space="preserve">
    <value>对类型/方法/字段进行编码并隐藏引用。</value>
  </data>
  <data name="ResourceProtectionName" xml:space="preserve">
    <value>资源保护</value>
  </data>
  <data name="ResourceProtectionDescription" xml:space="preserve">
    <value>此保护可对嵌入式资源进行编码和压缩。</value>
  </data>
  <data name="TypeScrambleProtectionName" xml:space="preserve">
    <value>类型干扰器</value>
  </data>
  <data name="TypeScrambleProtectionDescription" xml:space="preserve">
    <value>使用泛型替换方法参数传入的类型</value>
  </data>
  <data name="ScramblePhaseName" xml:space="preserve">
    <value>类型干扰器</value>
  </data>
  <data name="AnalyzePhaseName" xml:space="preserve">
    <value>类型扫描</value>
  </data>
  <data name="InjectPhaseName" xml:space="preserve">
    <value>资源加密注入</value>
  </data>
  <data name="ReferenceProxyPhaseName" xml:space="preserve">
    <value>编码引用代理</value>
  </data>
  <data name="ControlFlowPhaseName" xml:space="preserve">
    <value>控制流处理</value>
  </data>
  <data name="InjectPhaseConstantName" xml:space="preserve">
    <value>常量加密注入</value>
  </data>
  <data name="EncodePhaseConstantsName" xml:space="preserve">
    <value>常量编码</value>
  </data>
  <data name="ExtractPhaseName" xml:space="preserve">
    <value>打包信息提取</value>
  </data>
  <data name="AntiILDasmProtectionName" xml:space="preserve">
    <value>IL Dasm 反编译保护</value>
  </data>
  <data name="MDPhase_Name" xml:space="preserve">
    <value>防篡改元数据</value>
  </data>
  <data name="AntiDumpPhase_Name" xml:space="preserve">
    <value>反内存转储注入</value>
  </data>
  <data name="CompressorDescription" xml:space="preserve">
    <value>此压缩包可以减小输出文件大小。</value>
  </data>
  <data name="CompressorName" xml:space="preserve">
    <value>压缩打包</value>
  </data>
  <data name="Compressor_Pack_No_executable_module" xml:space="preserve">
    <value>没有可执行模块！</value>
  </data>
  <data name="Compressor_InjectStub_Encrypting_modules" xml:space="preserve">
    <value>加密模块中...</value>
  </data>
</root>
