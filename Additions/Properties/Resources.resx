<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
		Microsoft ResX Schema

		Version 1.3

		The primary goals of this format is to allow a simple XML format 
		that is mostly human readable. The generation and parsing of the 
		various data types are done through the TypeConverter classes 
		associated with the data types.

		Example:

		... ado.net/XML headers & schema ...
		<resheader name="resmimetype">text/microsoft-resx</resheader>
		<resheader name="version">1.3</resheader>
		<resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
		<resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
		<data name="Name1">this is my long string</data>
		<data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
		<data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
			[base64 mime encoded serialized .NET Framework object]
		</data>
		<data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
			[base64 mime encoded string representing a byte array form of the .NET Framework object]
		</data>

		There are any number of "resheader" rows that contain simple 
		name/value pairs.

		Each data row contains a name, and value. The row also contains a 
		type or mimetype. Type corresponds to a .NET class that support 
		text/value conversion through the TypeConverter architecture. 
		Classes that don't support this are serialized and stored with the 
		mimetype set.

		The mimetype is used for serialized objects, and tells the 
		ResXResourceReader how to depersist the object. This is currently not 
		extensible. For a given mimetype the value must be set accordingly:

		Note - application/x-microsoft.net.object.binary.base64 is the format 
		that the ResXResourceWriter will generate, however the reader can 
		read any of the formats listed below.

		mimetype: application/x-microsoft.net.object.binary.base64
		value   : The object must be serialized with 
			: System.Serialization.Formatters.Binary.BinaryFormatter
			: and then encoded with base64 encoding.

		mimetype: application/x-microsoft.net.object.soap.base64
		value   : The object must be serialized with 
			: System.Runtime.Serialization.Formatters.Soap.SoapFormatter
			: and then encoded with base64 encoding.

		mimetype: application/x-microsoft.net.object.bytearray.base64
		value   : The object must be serialized into a byte array 
			: using a System.ComponentModel.TypeConverter
			: and then encoded with base64 encoding.
	-->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>1.3</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.3500.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.3500.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AntiDe4DotProtection_Name" xml:space="preserve">
    <value>Anti De4Dot Protection</value>
  </data>
  <data name="AntiDe4DotProtection_Description" xml:space="preserve">
    <value>Prevents usage of De4Dot.</value>
  </data>
  <data name="AntiDe4DotPhase_Name" xml:space="preserve">
    <value>Anti De4Dot</value>
  </data>
  <data name="AntiDnSpyProtection_Name" xml:space="preserve">
    <value>Anti DnSpy Protection</value>
  </data>
  <data name="AntiDnSpyProtection_Description" xml:space="preserve">
    <value>This protection prevents dnspy.</value>
  </data>
  <data name="AntiDnSpyPhase_Name" xml:space="preserve">
    <value>Anti-dnspy injection</value>
  </data>
  <data name="AntiDumpProtection_Name" xml:space="preserve">
    <value>Anti Dump Protection</value>
  </data>
  <data name="AntiDumpProtection_Description" xml:space="preserve">
    <value>This protection prevents memory dumping.</value>
  </data>
  <data name="AntiDumpPhase_Name" xml:space="preserve">
    <value>Anti Dump Injection</value>
  </data>
  <data name="AntiVMProtection_Name" xml:space="preserve">
    <value>Anti Virtual Machine Protection</value>
  </data>
  <data name="AntiVMProtection_Description" xml:space="preserve">
    <value>This protection prevents the assembly from being run on a VM.</value>
  </data>
  <data name="AntiVMPhase_Name" xml:space="preserve">
    <value>Anti VM Injection</value>
  </data>
  <data name="AntiWatermarkProtection_Name" xml:space="preserve">
    <value>Anti Watermark</value>
  </data>
  <data name="AntiWatermarkProtection_Description" xml:space="preserve">
    <value>Removes the ProtectedBy watermark to prevent Protector detection.</value>
  </data>
  <data name="AntiWatermarkPhase_Name" xml:space="preserve">
    <value>ProtectedBy attribute removal</value>
  </data>
  <data name="ConstantProtection_Name" xml:space="preserve">
    <value>Constants Protection</value>
  </data>
  <data name="ConstantProtection_Description" xml:space="preserve">
    <value>This protection encodes and compresses constants in the code.</value>
  </data>
  <data name="EncodePhase_Name" xml:space="preserve">
    <value>Constants encoding</value>
  </data>
  <data name="InjectPhase_Name" xml:space="preserve">
    <value>Constant encryption helpers injection</value>
  </data>
  <data name="ControlFlowPhase_Name" xml:space="preserve">
    <value>Control flow mangling</value>
  </data>
  <data name="ControlFlowPhase_ProcessMethod_Failed" xml:space="preserve">
    <value>Failed to calcuate maxstack.</value>
  </data>
  <data name="ControlFlowProtection_Name" xml:space="preserve">
    <value>Control Flow Protection</value>
  </data>
  <data name="ControlFlowProtection_Description" xml:space="preserve">
    <value>This protection mangles the code in the methods so that decompilers cannot decompile the methods.</value>
  </data>
  <data name="EraseHeadersProtection_Description" xml:space="preserve">
    <value>This protection flood the module.cctor.</value>
  </data>
  <data name="EraseHeadersProtection_Name" xml:space="preserve">
    <value>erase headers Protection</value>
  </data>
  <data name="ErasePhase_Name" xml:space="preserve">
    <value>Erasing Headers</value>
  </data>
  <data name="FakeObfuscatorAttributesPhase_Name" xml:space="preserve">
    <value>Fake obfuscator attribute addition</value>
  </data>
  <data name="FakeObfuscatorAttributesPhase_InjectType_Debug" xml:space="preserve">
    <value>Added attribute </value>
  </data>
  <data name="FakeObfuscatorProtection_Name" xml:space="preserve">
    <value>Fake Obfuscator Protection</value>
  </data>
  <data name="FakeObfuscatorProtection_Description" xml:space="preserve">
    <value>Confuses obfuscators like de4dot by adding types typical to other obfuscators.</value>
  </data>
  <data name="FakeObfuscatorTypesPhase_Name" xml:space="preserve">
    <value>Fake obfuscator type addition</value>
  </data>
  <data name="FakeObfuscatorTypesPhase_InjectType_Debug" xml:space="preserve">
    <value>Added type </value>
  </data>
  <data name="HideCallsProtection_Name" xml:space="preserve">
    <value>Hide Calls Protection</value>
  </data>
  <data name="HideCallsProtection_Description" xml:space="preserve">
    <value>This protection crash .cctor.</value>
  </data>
  <data name="HideCallsPhase_Name" xml:space="preserve">
    <value>Hide Calls Injection</value>
  </data>
  <data name="IntegrityChecker_Name" xml:space="preserve">
    <value>Integrity Protection</value>
  </data>
  <data name="IntegrityChecker_Description" xml:space="preserve">
    <value>This protection hashs the module to preventing file modifications.</value>
  </data>
  <data name="HashPhase_Name" xml:space="preserve">
    <value>Hash Phase</value>
  </data>
  <data name="JITMode_OnWriterEvent_Extracting_method_bodies" xml:space="preserve">
    <value>Extracting method bodies...</value>
  </data>
  <data name="JITMode_OnWriterEvent_Encrypting_method_section" xml:space="preserve">
    <value>Encrypting method section...</value>
  </data>
  <data name="LocaltoFieldProtection_Name" xml:space="preserve">
    <value>local to field Protection</value>
  </data>
  <data name="LocaltoFieldProtection_Description" xml:space="preserve">
    <value>This protection marks the module with a attribute that discourage ILDasm from disassembling it.</value>
  </data>
  <data name="localtofieldphase_Name" xml:space="preserve">
    <value>Local-to-field executing</value>
  </data>
  <data name="MutateConstantsProtection_Name" xml:space="preserve">
    <value>Mutate Constants</value>
  </data>
  <data name="MutateConstantsProtection_Description" xml:space="preserve">
    <value>This protection mutate Contants with sizeofs.</value>
  </data>
  <data name="MutateConstantsPhase_Name" xml:space="preserve">
    <value>Mutating Constants</value>
  </data>
  <data name="CallvirtPhase_Name" xml:space="preserve">
    <value>Callvirt Protection</value>
  </data>
  <data name="CtorCallProtection_Name" xml:space="preserve">
    <value>Ctor Call Protection</value>
  </data>
  <data name="LdfldPhase_Name" xml:space="preserve">
    <value>Ldfld Protection</value>
  </data>
  <data name="MultiplyPhase_Name" xml:space="preserve">
    <value>Multiply Protection</value>
  </data>
  <data name="OpCodeProtection_Name" xml:space="preserve">
    <value>OpCode Protection</value>
  </data>
  <data name="OpCodeProtection_Description" xml:space="preserve">
    <value>Protects OpCodes such as Ldlfd.</value>
  </data>
  <data name="ReduceMetadataOptimization_Name" xml:space="preserve">
    <value>Reduce Metadata Confusion</value>
  </data>
  <data name="ReduceMetadataOptimization_Description" xml:space="preserve">
    <value>This optimization remove unnecessary metadata.</value>
  </data>
  <data name="ReduceMetadataOptimizationPhase_Name" xml:space="preserve">
    <value>Reduce Metadata Confusion</value>
  </data>
  <data name="IntegrityPhase_Name" xml:space="preserve">
    <value> MD5 Hash Check Injection</value>
  </data>
</root>