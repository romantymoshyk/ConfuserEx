<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
		Microsoft ResX Schema

		Version 1.3

		The primary goals of this format is to allow a simple XML format 
		that is mostly human readable. The generation and parsing of the 
		various data types are done through the TypeConverter classes 
		associated with the data types.

		Example:

		... ado.net/XML headers & schema ...
		<resheader name="resmimetype">text/microsoft-resx</resheader>
		<resheader name="version">1.3</resheader>
		<resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
		<resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
		<data name="Name1">this is my long string</data>
		<data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
		<data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
			[base64 mime encoded serialized .NET Framework object]
		</data>
		<data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
			[base64 mime encoded string representing a byte array form of the .NET Framework object]
		</data>

		There are any number of "resheader" rows that contain simple 
		name/value pairs.

		Each data row contains a name, and value. The row also contains a 
		type or mimetype. Type corresponds to a .NET class that support 
		text/value conversion through the TypeConverter architecture. 
		Classes that don't support this are serialized and stored with the 
		mimetype set.

		The mimetype is used for serialized objects, and tells the 
		ResXResourceReader how to depersist the object. This is currently not 
		extensible. For a given mimetype the value must be set accordingly:

		Note - application/x-microsoft.net.object.binary.base64 is the format 
		that the ResXResourceWriter will generate, however the reader can 
		read any of the formats listed below.

		mimetype: application/x-microsoft.net.object.binary.base64
		value   : The object must be serialized with 
			: System.Serialization.Formatters.Binary.BinaryFormatter
			: and then encoded with base64 encoding.

		mimetype: application/x-microsoft.net.object.soap.base64
		value   : The object must be serialized with 
			: System.Runtime.Serialization.Formatters.Soap.SoapFormatter
			: and then encoded with base64 encoding.

		mimetype: application/x-microsoft.net.object.bytearray.base64
		value   : The object must be serialized into a byte array 
			: using a System.ComponentModel.TypeConverter
			: and then encoded with base64 encoding.
	-->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>1.3</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.3500.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.3500.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AntiDe4DotProtection_Name" xml:space="preserve">
    <value>防止De4Dot解密(插件)</value>
  </data>
  <data name="AntiDe4DotProtection_Description" xml:space="preserve">
    <value>禁止使用De4Dot。</value>
  </data>
  <data name="AntiDe4DotPhase_Name" xml:space="preserve">
    <value>反De4Dot(插件)</value>
  </data>
  <data name="AntiDnSpyProtection_Name" xml:space="preserve">
    <value>反DnSpy防护(插件)</value>
  </data>
  <data name="AntiDnSpyProtection_Description" xml:space="preserve">
    <value>此保护可防止dnspy。</value>
  </data>
  <data name="AntiDnSpyPhase_Name" xml:space="preserve">
    <value>DnSpy注入</value>
  </data>
  <data name="AntiDumpProtection_Name" xml:space="preserve">
    <value>内存转储保护(插件)</value>
  </data>
  <data name="AntiDumpProtection_Description" xml:space="preserve">
    <value>此保护可防止内存转储。</value>
  </data>
  <data name="AntiDumpPhase_Name" xml:space="preserve">
    <value>防止内存转储注入</value>
  </data>
  <data name="AntiVMProtection_Name" xml:space="preserve">
    <value>反虚拟机保护(插件)</value>
  </data>
  <data name="AntiVMProtection_Description" xml:space="preserve">
    <value>此保护可防止程序集在VM上运行。</value>
  </data>
  <data name="AntiVMPhase_Name" xml:space="preserve">
    <value>反虚拟机注入</value>
  </data>
  <data name="AntiWatermarkProtection_Name" xml:space="preserve">
    <value>反水印(插件)</value>
  </data>
  <data name="AntiWatermarkProtection_Description" xml:space="preserve">
    <value>删除ConfusedBy水印以防止检测到混淆器。</value>
  </data>
  <data name="AntiWatermarkPhase_Name" xml:space="preserve">
    <value>移除ConfusedBy水印标志</value>
  </data>
  <data name="ConstantProtection_Name" xml:space="preserve">
    <value>常量保护(插件)</value>
  </data>
  <data name="ConstantProtection_Description" xml:space="preserve">
    <value>此保护对代码中的常数进行编码和压缩。</value>
  </data>
  <data name="EncodePhase_Name" xml:space="preserve">
    <value>常量编码</value>
  </data>
  <data name="InjectPhase_Name" xml:space="preserve">
    <value>常量加密注入</value>
  </data>
  <data name="ControlFlowPhase_Name" xml:space="preserve">
    <value>控制流处理</value>
  </data>
  <data name="ControlFlowPhase_ProcessMethod_Failed" xml:space="preserve">
    <value>无法计算maxstack。</value>
  </data>
  <data name="ControlFlowProtection_Name" xml:space="preserve">
    <value>流程控制保护(插件)</value>
  </data>
  <data name="ControlFlowProtection_Description" xml:space="preserve">
    <value>这种保护会破坏方法中的代码，以便反编译器无法反编译方法。</value>
  </data>
  <data name="EraseHeadersProtection_Description" xml:space="preserve">
    <value>这种保护会清除module.cctor。</value>
  </data>
  <data name="EraseHeadersProtection_Name" xml:space="preserve">
    <value>清除PE标头保护(插件)</value>
  </data>
  <data name="ErasePhase_Name" xml:space="preserve">
    <value>清除PE标头</value>
  </data>
  <data name="FakeObfuscatorAttributesPhase_Name" xml:space="preserve">
    <value>伪造混淆器</value>
  </data>
  <data name="FakeObfuscatorAttributesPhase_InjectType_Debug" xml:space="preserve">
    <value>新增特性</value>
  </data>
  <data name="FakeObfuscatorProtection_Name" xml:space="preserve">
    <value>伪造混淆器保护(插件)</value>
  </data>
  <data name="FakeObfuscatorProtection_Description" xml:space="preserve">
    <value>通过添加其他混淆器的典型类型来迷惑反混淆器（如de4dot）。</value>
  </data>
  <data name="FakeObfuscatorTypesPhase_Name" xml:space="preserve">
    <value>伪造混淆器类型</value>
  </data>
  <data name="FakeObfuscatorTypesPhase_InjectType_Debug" xml:space="preserve">
    <value>新增类型</value>
  </data>
  <data name="HideCallsProtection_Name" xml:space="preserve">
    <value>隐藏构造函数保护(插件)</value>
  </data>
  <data name="HideCallsProtection_Description" xml:space="preserve">
    <value>此保护崩溃.cctor。</value>
  </data>
  <data name="HideCallsPhase_Name" xml:space="preserve">
    <value>隐藏构造函数注入</value>
  </data>
  <data name="IntegrityChecker_Name" xml:space="preserve">
    <value>完整性保护(插件)</value>
  </data>
  <data name="IntegrityChecker_Description" xml:space="preserve">
    <value>这种保护会对模块进行哈希处理，以防止文件被修改。</value>
  </data>
  <data name="HashPhase_Name" xml:space="preserve">
    <value>MD5哈希阶段</value>
  </data>
  <data name="JITMode_OnWriterEvent_Extracting_method_bodies" xml:space="preserve">
    <value>提取方法主体...</value>
  </data>
  <data name="JITMode_OnWriterEvent_Encrypting_method_section" xml:space="preserve">
    <value>加密方法部分...</value>
  </data>
  <data name="LocaltoFieldProtection_Name" xml:space="preserve">
    <value>本地到现场保护(插件)</value>
  </data>
  <data name="LocaltoFieldProtection_Description" xml:space="preserve">
    <value>此保护使用阻止ILDasm反汇编它的属性标记模块。</value>
  </data>
  <data name="localtofieldphase_Name" xml:space="preserve">
    <value>Local-to-field 执行</value>
  </data>
  <data name="MutateConstantsProtection_Name" xml:space="preserve">
    <value>变异常数(插件)</value>
  </data>
  <data name="MutateConstantsProtection_Description" xml:space="preserve">
    <value>此保护使用sizeofs突变了Contant。</value>
  </data>
  <data name="MutateConstantsPhase_Name" xml:space="preserve">
    <value>变异常数</value>
  </data>
  <data name="CallvirtPhase_Name" xml:space="preserve">
    <value>Callvirt保护</value>
  </data>
  <data name="CtorCallProtection_Name" xml:space="preserve">
    <value>构造函数保护(插件)</value>
  </data>
  <data name="LdfldPhase_Name" xml:space="preserve">
    <value>Ldfld保护</value>
  </data>
  <data name="MultiplyPhase_Name" xml:space="preserve">
    <value>多重保护</value>
  </data>
  <data name="OpCodeProtection_Name" xml:space="preserve">
    <value>OpCode 保护(插件)</value>
  </data>
  <data name="OpCodeProtection_Description" xml:space="preserve">
    <value>保护OpCode操作码，例如Ldlfd。</value>
  </data>
  <data name="ReduceMetadataOptimization_Name" xml:space="preserve">
    <value>减少元数据混淆(插件)</value>
  </data>
  <data name="ReduceMetadataOptimization_Description" xml:space="preserve">
    <value>此优化删除了不必要的元数据，例如枚举、事件定义等。</value>
  </data>
  <data name="ReduceMetadataOptimizationPhase_Name" xml:space="preserve">
    <value>减少元数据混淆</value>
  </data>
  <data name="IntegrityPhase_Name" xml:space="preserve">
    <value>MD5哈希检查注入</value>
  </data>
</root>
